name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy (all, backend, ai, scraping, frontend, admin)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - backend
          - ai
          - scraping
          - frontend
          - admin

env:
  REGISTRY: docker.io
  REGISTRY_USERNAME: modmasterpro
  CLUSTER_NAME: modmaster-prod
  CLUSTER_ZONE: us-east1-a

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend-api, ai-service, web-scraping]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        if: matrix.service != 'ai-service'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json
      
      - name: Setup Python
        if: matrix.service == 'ai-service'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: ${{ matrix.service }}/requirements.txt
      
      - name: Install dependencies
        run: |
          cd ${{ matrix.service }}
          if [ "${{ matrix.service }}" = "ai-service" ]; then
            pip install -r requirements.txt
            pip install pytest pytest-cov pytest-asyncio
          else
            npm ci
          fi
      
      - name: Run tests
        run: |
          cd ${{ matrix.service }}
          if [ "${{ matrix.service }}" = "ai-service" ]; then
            pytest --cov=app --cov-report=xml
          else
            npm test -- --coverage
          fi
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}

  build-and-push:
    name: Build and Push Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          - service: backend-api
            context: ./backend/api
            dockerfile: ./backend/api/Dockerfile
          - service: ai-service
            context: ./ai-service
            dockerfile: ./ai-service/Dockerfile
          - service: scraping-service
            context: ./web-scraping
            dockerfile: ./web-scraping/Dockerfile
          - service: frontend-mobile
            context: ./mobile-app
            dockerfile: ./mobile-app/Dockerfile.web
          - service: admin-dashboard
            context: ./admin-dashboard
            dockerfile: ./admin-dashboard/Dockerfile
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            NODE_ENV=production

  deploy:
    name: Deploy to Kubernetes
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
            --zone ${{ env.CLUSTER_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Update image tags
        run: |
          COMMIT_SHA=${{ github.sha }}
          SHORT_SHA=${COMMIT_SHA:0:7}
          
          # Update backend API
          kubectl set image deployment/backend-api \
            api=${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/backend-api:main-${SHORT_SHA} \
            -n modmaster-pro-prod
          
          # Update AI service
          kubectl set image deployment/ai-service \
            ai=${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/ai-service:main-${SHORT_SHA} \
            -n modmaster-pro-prod
          
          # Update scraping service
          kubectl set image deployment/scraping-service \
            scraper=${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/scraping-service:main-${SHORT_SHA} \
            -n modmaster-pro-prod
          
          # Update frontend
          kubectl set image deployment/frontend-mobile \
            frontend=${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/frontend-mobile:main-${SHORT_SHA} \
            -n modmaster-pro-prod
          
          # Update admin dashboard
          kubectl set image deployment/admin-dashboard \
            admin=${{ env.REGISTRY }}/${{ env.REGISTRY_USERNAME }}/admin-dashboard:main-${SHORT_SHA} \
            -n modmaster-pro-prod
      
      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/backend-api -n modmaster-pro-prod
          kubectl rollout status deployment/ai-service -n modmaster-pro-prod
          kubectl rollout status deployment/scraping-service -n modmaster-pro-prod
          kubectl rollout status deployment/frontend-mobile -n modmaster-pro-prod
          kubectl rollout status deployment/admin-dashboard -n modmaster-pro-prod
      
      - name: Run smoke tests
        run: |
          # Backend API health check
          API_URL=$(kubectl get ingress modmaster-api-ingress -n modmaster-pro-prod -o jsonpath='{.spec.rules[0].host}')
          curl -f https://${API_URL}/api/v1/health/live || exit 1
          
          # AI service health check
          curl -f https://${API_URL}/ai/v1/health/live || exit 1
      
      - name: Create deployment annotation
        run: |
          kubectl annotate deployment backend-api \
            kubernetes.io/change-cause="Deployed commit ${{ github.sha }} by ${{ github.actor }}" \
            -n modmaster-pro-prod --overwrite
      
      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Production deployment ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Message: ${{ github.event.head_commit.message }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  post-deploy:
    name: Post-Deployment Tasks
    needs: deploy
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Purge CDN cache
        run: |
          # Cloudflare cache purge
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'
      
      - name: Update status page
        run: |
          # Update status page (e.g., Statuspage.io)
          curl -X POST https://api.statuspage.io/v1/pages/${{ secrets.STATUSPAGE_ID }}/incidents \
            -H "Authorization: OAuth ${{ secrets.STATUSPAGE_API_KEY }}" \
            -d "incident[name]=Deployment completed" \
            -d "incident[status]=resolved" \
            -d "incident[impact]=none"
      
      - name: Trigger monitoring alerts reset
        run: |
          # Reset any monitoring alerts that might have been triggered during deployment
          curl -X POST https://api.pagerduty.com/maintenance_windows \
            -H "Authorization: Token token=${{ secrets.PAGERDUTY_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "maintenance_window": {
                "type": "maintenance_window",
                "start_time": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
                "end_time": "'$(date -u -d '+5 minutes' +%Y-%m-%dT%H:%M:%SZ)'",
                "description": "Post-deployment monitoring reset",
                "services": [{"id": "${{ secrets.PAGERDUTY_SERVICE_ID }}", "type": "service_reference"}]
              }
            }'
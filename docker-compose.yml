version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: modmaster-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-modmaster_pro}
      POSTGRES_USER: ${POSTGRES_USER:-modmaster_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - modmaster-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-modmaster_user} -d ${POSTGRES_DB:-modmaster_pro}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: modmaster-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - modmaster-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch for Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: modmaster-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - modmaster-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: modmaster-n8n
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USERNAME:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=UTC
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./web-scraping/n8n-workflows:/home/node/.n8n/workflows
    networks:
      - modmaster-network
    depends_on:
      - postgres
      - redis

  # Backend API Service
  backend-api:
    build:
      context: ./backend/api
      dockerfile: Dockerfile.dev
    container_name: modmaster-backend-api
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER:-modmaster_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-modmaster_pro}
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - JWT_SECRET=${JWT_SECRET}
      - API_PORT=3000
    ports:
      - "3000:3000"
    volumes:
      - ./backend/api:/app
      - /app/node_modules
    networks:
      - modmaster-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  # AI/ML Service
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: modmaster-ai-service
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://modmaster_user:modmaster_password@postgres:5432/modmaster_pro
      - REDIS_URL=redis://redis:6379/1
      - BACKEND_API_URL=http://backend-api:3000
      - INTERNAL_API_KEY=${INTERNAL_API_KEY:-dev-api-key}
      - MODEL_STORAGE_PATH=/app/models
      - DEBUG=true
      - PYTHONUNBUFFERED=1
      - PORT=8001
    ports:
      - "8001:8001"
    volumes:
      - ./ai-service:/app
      - ai-models:/app/models
      - ai-data:/app/data
    networks:
      - modmaster-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Scraping Service
  scraping-service:
    build:
      context: ./web-scraping
      dockerfile: Dockerfile.dev
    container_name: modmaster-scraping-service
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://modmaster_user:modmaster_password@postgres:5432/modmaster_pro
      - N8N_URL=http://n8n:5678
      - API_PORT=8002
    ports:
      - "8002:8002"
    volumes:
      - ./web-scraping:/app
      - scraping_cache:/app/cache
    networks:
      - modmaster-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      n8n:
        condition: service_started

  # Worker Service for Background Jobs
  worker-service:
    build:
      context: ./backend/worker-service
      dockerfile: Dockerfile.dev
    container_name: modmaster-worker-service
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://modmaster_user:modmaster_password@postgres:5432/modmaster_pro
    volumes:
      - ./backend/worker-service:/app
    networks:
      - modmaster-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Frontend Mobile App (React Native)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: modmaster-frontend
    environment:
      - NODE_ENV=development
      - REACT_NATIVE_PACKAGER_HOSTNAME=localhost
      - EXPO_DEVTOOLS_LISTEN_ADDRESS=0.0.0.0
    ports:
      - "19000:19000"  # Expo DevTools
      - "19001:19001"  # Expo CLI
      - "19002:19002"  # Expo Go
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - modmaster-network
    depends_on:
      - backend-api

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: modmaster-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - modmaster-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.2.0
    container_name: modmaster-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - modmaster-network
    depends_on:
      - prometheus

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: modmaster-minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY:-modmaster_access_key}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - modmaster-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  n8n_data:
  ai-models:
  ai-data:
  scraping_cache:
  prometheus_data:
  grafana_data:
  minio_data:

networks:
  modmaster-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16